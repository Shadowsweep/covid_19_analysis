{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8121361,"sourceType":"datasetVersion","datasetId":4798835}],"dockerImageVersionId":30684,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\n\n# Read a sample of the dataset\nsample_size = 200000  # Adjust the sample size as needed\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv', nrows=sample_size)\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the classifiers\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Train the classifiers\nrf_classifier.fit(X_train_imputed, y_train)\nada_classifier.fit(X_train_imputed, y_train)\nxgb_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the test data\ny_pred_rf = rf_classifier.predict(X_test_imputed)\ny_pred_ada = ada_classifier.predict(X_test_imputed)\ny_pred_xgb = xgb_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of each model\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\naccuracy_ada = accuracy_score(y_test, y_pred_ada)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\n\n# Store accuracies in a dictionary\naccuracies = {'Random Forest': accuracy_rf, 'AdaBoost': accuracy_ada, 'XGBoost': accuracy_xgb}\n\n# Plot the accuracies using a bar graph\nplt.figure(figsize=(10, 6))\nplt.bar(accuracies.keys(), accuracies.values(), color=['blue', 'green', 'red'])\nplt.xlabel('Classifier')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Classifier Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy values\nplt.show()\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-15T03:45:31.947373Z","iopub.execute_input":"2024-04-15T03:45:31.947824Z","iopub.status.idle":"2024-04-15T03:49:54.405539Z","shell.execute_reply.started":"2024-04-15T03:45:31.947796Z","shell.execute_reply":"2024-04-15T03:49:54.404378Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# Read a sample of the dataset\nsample_size = 200000  # Adjust the sample size as needed\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv', nrows=sample_size)\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the classifiers\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Fit the AdaBoostClassifier\nada_classifier.fit(X_train_imputed, y_train)\n\n# Initialize the ANN model\nann_model = Sequential([\n    Dense(64, activation='relu', input_shape=(X_train_imputed.shape[1],)),\n    Dropout(0.2),\n    Dense(32, activation='relu'),\n    Dropout(0.2),\n    Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nann_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Define early stopping to prevent overfitting\nearly_stopping = EarlyStopping(monitor='val_loss', patience=5)\n\n# Train the ANN model\nhistory = ann_model.fit(X_train_imputed, y_train, epochs=50, validation_split=0.2, callbacks=[early_stopping])\n\n# Predict the target variable on the test data\ny_pred_ada = ada_classifier.predict(X_test_imputed)\ny_pred_xgb = xgb_classifier.predict(X_test_imputed)\ny_pred_ann = (ann_model.predict(X_test_imputed) > 0.5).astype(\"int32\")\n\n# Calculate the accuracy of each model\naccuracy_ada = accuracy_score(y_test, y_pred_ada)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\naccuracy_ann = accuracy_score(y_test, y_pred_ann)\n\n# Store accuracies in a dictionary\naccuracies = {'AdaBoost': accuracy_ada, 'XGBoost': accuracy_xgb, 'ANN': accuracy_ann}\n\n# Plot the accuracies using a bar graph\nplt.figure(figsize=(10, 6))\nplt.bar(accuracies.keys(), accuracies.values(), color=['green', 'red', 'orange'])\nplt.xlabel('Classifier')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Classifier Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy values\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-20T16:29:15.567836Z","iopub.execute_input":"2024-04-20T16:29:15.568253Z","iopub.status.idle":"2024-04-20T16:38:24.174297Z","shell.execute_reply.started":"2024-04-20T16:29:15.568222Z","shell.execute_reply":"2024-04-20T16:38:24.172312Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Epoch 1/50\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:88: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -328410529792.0000 - val_accuracy: 0.0042 - val_loss: -3929856278528.0000\nEpoch 2/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0041 - loss: -7431572160512.0000 - val_accuracy: 0.0042 - val_loss: -20820063682560.0000\nEpoch 3/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0041 - loss: -30086669533184.0000 - val_accuracy: 0.0042 - val_loss: -56738682241024.0000\nEpoch 4/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0042 - loss: -72072210415616.0000 - val_accuracy: 0.0042 - val_loss: -117759639814144.0000\nEpoch 5/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0043 - loss: -145186067841024.0000 - val_accuracy: 0.0042 - val_loss: -207251600048128.0000\nEpoch 6/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0036 - loss: -251387707392000.0000 - val_accuracy: 0.0042 - val_loss: -333466126254080.0000\nEpoch 7/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step - accuracy: 0.0039 - loss: -393608821735424.0000 - val_accuracy: 0.0042 - val_loss: -502510401880064.0000\nEpoch 8/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0036 - loss: -563637013970944.0000 - val_accuracy: 0.0042 - val_loss: -718006258761728.0000\nEpoch 9/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -804259469721600.0000 - val_accuracy: 0.0042 - val_loss: -984043109744640.0000\nEpoch 10/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0037 - loss: -1090305768030208.0000 - val_accuracy: 0.0042 - val_loss: -1311145201762304.0000\nEpoch 11/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -1472157083238400.0000 - val_accuracy: 0.0042 - val_loss: -1696830849024000.0000\nEpoch 12/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -1944812194365440.0000 - val_accuracy: 0.0042 - val_loss: -2153804900335616.0000\nEpoch 13/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0043 - loss: -2406011419754496.0000 - val_accuracy: 0.0042 - val_loss: -2688949906571264.0000\nEpoch 14/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0043 - loss: -2968743672020992.0000 - val_accuracy: 0.0042 - val_loss: -3300984088428544.0000\nEpoch 15/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0040 - loss: -3644927216975872.0000 - val_accuracy: 0.0042 - val_loss: -3992089691947008.0000\nEpoch 16/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0038 - loss: -4303231081512960.0000 - val_accuracy: 0.0042 - val_loss: -4781647220178944.0000\nEpoch 17/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0038 - loss: -5280558137475072.0000 - val_accuracy: 0.0042 - val_loss: -5662399520571392.0000\nEpoch 18/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0042 - loss: -6226901030928384.0000 - val_accuracy: 0.0042 - val_loss: -6635185453924352.0000\nEpoch 19/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0043 - loss: -7223089704206336.0000 - val_accuracy: 0.0042 - val_loss: -7729688076091392.0000\nEpoch 20/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -8429859013394432.0000 - val_accuracy: 0.0042 - val_loss: -8937058143830016.0000\nEpoch 21/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0038 - loss: -9655776897400832.0000 - val_accuracy: 0.0042 - val_loss: -10251254785638400.0000\nEpoch 22/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -11137509476007936.0000 - val_accuracy: 0.0042 - val_loss: -11690316864159744.0000\nEpoch 23/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.0042 - loss: -13095768676106240.0000 - val_accuracy: 0.0042 - val_loss: -13247455109840896.0000\nEpoch 24/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0043 - loss: -14531180032425984.0000 - val_accuracy: 0.0042 - val_loss: -14953056416301056.0000\nEpoch 25/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0037 - loss: -16434887779155968.0000 - val_accuracy: 0.0042 - val_loss: -16792352538492928.0000\nEpoch 26/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3ms/step - accuracy: 0.0042 - loss: -18407158236315648.0000 - val_accuracy: 0.0042 - val_loss: -18776037944983552.0000\nEpoch 27/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -20417656049893376.0000 - val_accuracy: 0.0042 - val_loss: -20894895635955712.0000\nEpoch 28/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0042 - loss: -22905739194400768.0000 - val_accuracy: 0.0042 - val_loss: -23164113689509888.0000\nEpoch 29/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -24835397133533184.0000 - val_accuracy: 0.0042 - val_loss: -25599222707388416.0000\nEpoch 30/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -27684702060019712.0000 - val_accuracy: 0.0042 - val_loss: -28232314685227008.0000\nEpoch 31/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 3ms/step - accuracy: 0.0042 - loss: -30424994274082816.0000 - val_accuracy: 0.0042 - val_loss: -31001402507526144.0000\nEpoch 32/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0043 - loss: -33116714702995456.0000 - val_accuracy: 0.0042 - val_loss: -33968170494590976.0000\nEpoch 33/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0038 - loss: -37063218417369088.0000 - val_accuracy: 0.0042 - val_loss: -37079092616495104.0000\nEpoch 34/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0042 - loss: -41612847209250816.0000 - val_accuracy: 0.0042 - val_loss: -40401550467661824.0000\nEpoch 35/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -44853232530358272.0000 - val_accuracy: 0.0042 - val_loss: -43876041571172352.0000\nEpoch 36/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0041 - loss: -45858924892520448.0000 - val_accuracy: 0.0042 - val_loss: -47612980946272256.0000\nEpoch 37/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0038 - loss: -51272885787951104.0000 - val_accuracy: 0.0042 - val_loss: -51472734911201280.0000\nEpoch 38/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0037 - loss: -56157887101140992.0000 - val_accuracy: 0.0042 - val_loss: -55617447071318016.0000\nEpoch 39/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0042 - loss: -59179190435446784.0000 - val_accuracy: 0.0042 - val_loss: -59920579100147712.0000\nEpoch 40/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0040 - loss: -65980713530294272.0000 - val_accuracy: 0.0042 - val_loss: -64425527347249152.0000\nEpoch 41/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step - accuracy: 0.0041 - loss: -68763293992353792.0000 - val_accuracy: 0.0042 - val_loss: -69212315643281408.0000\nEpoch 42/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0045 - loss: -73302120941486080.0000 - val_accuracy: 0.0042 - val_loss: -74238209063649280.0000\nEpoch 43/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0038 - loss: -78411757634191360.0000 - val_accuracy: 0.0042 - val_loss: -79460116201472000.0000\nEpoch 44/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -84139070753603584.0000 - val_accuracy: 0.0042 - val_loss: -84934301128327168.0000\nEpoch 45/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -90568224478855168.0000 - val_accuracy: 0.0042 - val_loss: -90642123686150144.0000\nEpoch 46/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0036 - loss: -97866851383508992.0000 - val_accuracy: 0.0042 - val_loss: -96510148524113920.0000\nEpoch 47/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0040 - loss: -100922669075005440.0000 - val_accuracy: 0.0042 - val_loss: -102749730982854656.0000\nEpoch 48/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.0040 - loss: -110435050973036544.0000 - val_accuracy: 0.0042 - val_loss: -109141612981911552.0000\nEpoch 49/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 2ms/step - accuracy: 0.0041 - loss: -115244735739723776.0000 - val_accuracy: 0.0042 - val_loss: -115844510742740992.0000\nEpoch 50/50\n\u001b[1m4000/4000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - accuracy: 0.0039 - loss: -124231310561509376.0000 - val_accuracy: 0.0042 - val_loss: -122805596167602176.0000\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotFittedError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 61\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[38;5;66;03m# Predict the target variable on the test data\u001b[39;00m\n\u001b[1;32m     60\u001b[0m y_pred_ada \u001b[38;5;241m=\u001b[39m ada_classifier\u001b[38;5;241m.\u001b[39mpredict(X_test_imputed)\n\u001b[0;32m---> 61\u001b[0m y_pred_xgb \u001b[38;5;241m=\u001b[39m \u001b[43mxgb_classifier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_test_imputed\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     62\u001b[0m y_pred_ann \u001b[38;5;241m=\u001b[39m (ann_model\u001b[38;5;241m.\u001b[39mpredict(X_test_imputed) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0.5\u001b[39m)\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mint32\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     64\u001b[0m \u001b[38;5;66;03m# Calculate the accuracy of each model\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:1553\u001b[0m, in \u001b[0;36mXGBClassifier.predict\u001b[0;34m(self, X, output_margin, validate_features, base_margin, iteration_range)\u001b[0m\n\u001b[1;32m   1544\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpredict\u001b[39m(\n\u001b[1;32m   1545\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   1546\u001b[0m     X: ArrayLike,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1550\u001b[0m     iteration_range: Optional[Tuple[\u001b[38;5;28mint\u001b[39m, \u001b[38;5;28mint\u001b[39m]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1551\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ArrayLike:\n\u001b[1;32m   1552\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(verbosity\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbosity):\n\u001b[0;32m-> 1553\u001b[0m         class_probs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1554\u001b[0m \u001b[43m            \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1555\u001b[0m \u001b[43m            \u001b[49m\u001b[43moutput_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moutput_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1556\u001b[0m \u001b[43m            \u001b[49m\u001b[43mvalidate_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidate_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1557\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1558\u001b[0m \u001b[43m            \u001b[49m\u001b[43miteration_range\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43miteration_range\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1559\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m output_margin:\n\u001b[1;32m   1561\u001b[0m             \u001b[38;5;66;03m# If output_margin is active, simply return the scores\u001b[39;00m\n\u001b[1;32m   1562\u001b[0m             \u001b[38;5;28;01mreturn\u001b[39;00m class_probs\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:1168\u001b[0m, in \u001b[0;36mXGBModel.predict\u001b[0;34m(self, X, output_margin, validate_features, base_margin, iteration_range)\u001b[0m\n\u001b[1;32m   1166\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_can_use_inplace_predict():\n\u001b[1;32m   1167\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1168\u001b[0m         predts \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_booster\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39minplace_predict(\n\u001b[1;32m   1169\u001b[0m             data\u001b[38;5;241m=\u001b[39mX,\n\u001b[1;32m   1170\u001b[0m             iteration_range\u001b[38;5;241m=\u001b[39miteration_range,\n\u001b[1;32m   1171\u001b[0m             predict_type\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmargin\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m output_margin \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1172\u001b[0m             missing\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmissing,\n\u001b[1;32m   1173\u001b[0m             base_margin\u001b[38;5;241m=\u001b[39mbase_margin,\n\u001b[1;32m   1174\u001b[0m             validate_features\u001b[38;5;241m=\u001b[39mvalidate_features,\n\u001b[1;32m   1175\u001b[0m         )\n\u001b[1;32m   1176\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m _is_cupy_array(predts):\n\u001b[1;32m   1177\u001b[0m             \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcupy\u001b[39;00m  \u001b[38;5;66;03m# pylint: disable=import-error\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:725\u001b[0m, in \u001b[0;36mXGBModel.get_booster\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    722\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__sklearn_is_fitted__():\n\u001b[1;32m    723\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mexceptions\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m NotFittedError\n\u001b[0;32m--> 725\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m NotFittedError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mneed to call fit or load_model beforehand\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    726\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_Booster\n","\u001b[0;31mNotFittedError\u001b[0m: need to call fit or load_model beforehand"],"ename":"NotFittedError","evalue":"need to call fit or load_model beforehand","output_type":"error"}]}]}