{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8121361,"sourceType":"datasetVersion","datasetId":4798835}],"dockerImageVersionId":30684,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Specify the path to your CSV file\nfile_path = '/kaggle/input/covid19prediic/time-series-19-covid-combined.csv'\n\n# Read the entire CSV file into a DataFrame\ndata = pd.read_csv(file_path)\n\n# Display information about the DataFrame ---> Fetch info of the dataset\ndata.info()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:35:44.921628Z","iopub.execute_input":"2024-04-21T10:35:44.922357Z","iopub.status.idle":"2024-04-21T10:35:45.368419Z","shell.execute_reply.started":"2024-04-21T10:35:44.922315Z","shell.execute_reply":"2024-04-21T10:35:45.366695Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 231744 entries, 0 to 231743\nData columns (total 6 columns):\n #   Column          Non-Null Count   Dtype  \n---  ------          --------------   -----  \n 0   Date            231744 non-null  object \n 1   Country/Region  231744 non-null  object \n 2   Province/State  72624 non-null   object \n 3   Confirmed       231744 non-null  int64  \n 4   Recovered       218688 non-null  float64\n 5   Deaths          231744 non-null  int64  \ndtypes: float64(1), int64(2), object(3)\nmemory usage: 10.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\n# Specify the path to your CSV file\nfile_path = '/kaggle/input/covid19prediic/time-series-19-covid-combined.csv'\n\n# Read the entire CSV file into a DataFrame\ndata = pd.read_csv(file_path)\n\n# Perform cleaning operations ----> Clean the data\n# 1. Handling missing values\ndata.dropna(inplace=True)\n\n# 2. Converting date column to datetime format if applicable\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# 3. Dropping irrelevant columns if any\n# data.drop(columns=['column_name'], inplace=True)\n\n# 4. Removing duplicate rows if any\ndata.drop_duplicates(inplace=True)\n\n# Display information about the DataFrame after cleaning\nprint(\"\\nData Info After Cleaning:\")\nprint(data.info())\n\n# Optionally, you can save the cleaned DataFrame to a new CSV file\n# data.to_csv('/path/to/cleaned_data.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:41:47.864306Z","iopub.execute_input":"2024-04-21T10:41:47.865055Z","iopub.status.idle":"2024-04-21T10:41:48.215354Z","shell.execute_reply.started":"2024-04-21T10:41:47.865016Z","shell.execute_reply":"2024-04-21T10:41:48.214117Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"\nData Info After Cleaning:\n<class 'pandas.core.frame.DataFrame'>\nIndex: 59568 entries, 7344 to 222767\nData columns (total 6 columns):\n #   Column          Non-Null Count  Dtype         \n---  ------          --------------  -----         \n 0   Date            59568 non-null  datetime64[ns]\n 1   Country/Region  59568 non-null  object        \n 2   Province/State  59568 non-null  object        \n 3   Confirmed       59568 non-null  int64         \n 4   Recovered       59568 non-null  float64       \n 5   Deaths          59568 non-null  int64         \ndtypes: datetime64[ns](1), float64(1), int64(2), object(2)\nmemory usage: 3.2+ MB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Analysis of Datatset\n#To show DATE vs Confirmed Case \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Convert 'Date' column to datetime format\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Group by date and sum the confirmed cases for each date\nconfirmed_by_date = data.groupby('Date')['Confirmed'].sum()\n\n# Plot Date vs. Confirmed cases\nplt.figure(figsize=(8, 4))  # Adjust the size here\nplt.plot(confirmed_by_date.index, confirmed_by_date.values, marker='o', linestyle='-')\nplt.title('Date vs. Confirmed Cases')\nplt.xlabel('Date')\nplt.ylabel('Confirmed Cases')\nplt.grid(True)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:37:54.931652Z","iopub.execute_input":"2024-04-21T10:37:54.932418Z","iopub.status.idle":"2024-04-21T10:37:55.852517Z","shell.execute_reply.started":"2024-04-21T10:37:54.932373Z","shell.execute_reply":"2024-04-21T10:37:55.851286Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Convert 'Date' column to datetime format\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Group by date and sum the confirmed cases for each date\nconfirmed_by_date = data.groupby('Date')['Confirmed'].sum().reset_index()\n\n# Plot Date vs. Confirmed cases using Seaborn\nplt.figure(figsize=(7, 5))\nsns.lineplot(x='Date', y='Confirmed', data=confirmed_by_date)\nplt.title('Date vs. Confirmed Cases (Seaborn)')\nplt.xlabel('Date')\nplt.ylabel('Confirmed Cases')\nplt.grid(True)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:44:48.123185Z","iopub.execute_input":"2024-04-21T10:44:48.125013Z","iopub.status.idle":"2024-04-21T10:44:50.794426Z","shell.execute_reply.started":"2024-04-21T10:44:48.124943Z","shell.execute_reply":"2024-04-21T10:44:50.793073Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 700x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Convert 'Date' column to datetime format\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Group by date and sum the recovered cases for each date\nrecovered_by_date = data.groupby('Date')['Recovered'].sum().reset_index()\n\n# Plot Date vs. Recovered cases using Seaborn\nplt.figure(figsize=(7, 5))\nsns.lineplot(x='Date', y='Recovered', data=recovered_by_date)\nplt.title('Date vs. Recovered Cases (Seaborn)')\nplt.xlabel('Date')\nplt.ylabel('Recovered Cases')\nplt.grid(True)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:56:13.774321Z","iopub.execute_input":"2024-04-21T10:56:13.774762Z","iopub.status.idle":"2024-04-21T10:56:14.641273Z","shell.execute_reply.started":"2024-04-21T10:56:13.774733Z","shell.execute_reply":"2024-04-21T10:56:14.637557Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 700x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Convert 'Date' column to datetime format\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Group by date and sum the deaths for each date\ndeaths_by_date = data.groupby('Date')['Deaths'].sum().reset_index()\n\n# Plot Date vs. Deaths using Seaborn\nplt.figure(figsize=(7, 5))\nsns.lineplot(x='Date', y='Deaths', data=deaths_by_date)\nplt.title('Date vs. Deaths (Seaborn)')\nplt.xlabel('Date')\nplt.ylabel('Deaths')\nplt.grid(True)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T10:56:59.622070Z","iopub.execute_input":"2024-04-21T10:56:59.622586Z","iopub.status.idle":"2024-04-21T10:57:00.433232Z","shell.execute_reply.started":"2024-04-21T10:56:59.622543Z","shell.execute_reply":"2024-04-21T10:57:00.431974Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 700x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Display the shape of train and test sets\nprint(\"Train set shape (X_train):\", X_train.shape)\nprint(\"Test set shape (X_test):\", X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:00:02.577095Z","iopub.execute_input":"2024-04-21T11:00:02.577576Z","iopub.status.idle":"2024-04-21T11:00:02.859869Z","shell.execute_reply.started":"2024-04-21T11:00:02.577542Z","shell.execute_reply":"2024-04-21T11:00:02.858347Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Train set shape (X_train): (185395, 2)\nTest set shape (X_test): (46349, 2)\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot distribution of countries in train and test sets\nplt.figure(figsize=(10, 6))\n\nplt.subplot(1, 2, 1)\nplt.hist(y_train, bins=30, color='blue', alpha=0.7)\nplt.title('Distribution of Countries in Train Set')\nplt.xlabel('Country')\nplt.ylabel('Frequency')\n\nplt.subplot(1, 2, 2)\nplt.hist(y_test, bins=30, color='green', alpha=0.7)\nplt.title('Distribution of Countries in Test Set')\nplt.xlabel('Country')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:01:04.022097Z","iopub.execute_input":"2024-04-21T11:01:04.022677Z","iopub.status.idle":"2024-04-21T11:01:07.457768Z","shell.execute_reply.started":"2024-04-21T11:01:04.022640Z","shell.execute_reply":"2024-04-21T11:01:07.456038Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer\n\n# Read the entire CSV file\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the Random Forest classifier with reduced memory usage\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier on the imputed training data\nrf_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the imputed test data\ny_pred = rf_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of Random Forest Classifier after imputation:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T11:20:49.598653Z","iopub.execute_input":"2024-04-21T11:20:49.599218Z","iopub.status.idle":"2024-04-21T11:23:06.585117Z","shell.execute_reply.started":"2024-04-21T11:20:49.599178Z","shell.execute_reply":"2024-04-21T11:23:06.583337Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Accuracy of Random Forest Classifier after imputation: 0.5076916438326609\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer\n\n# Read the entire CSV file\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the Decision Tree classifier\ndt_classifier = DecisionTreeClassifier(random_state=42)\n\n# Train the classifier on the imputed training data\ndt_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the imputed test data\ny_pred = dt_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of Decision Tree Classifier after imputation:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-23T10:11:59.318352Z","iopub.execute_input":"2024-04-23T10:11:59.319060Z","iopub.status.idle":"2024-04-23T10:12:02.860282Z","shell.execute_reply.started":"2024-04-23T10:11:59.319016Z","shell.execute_reply":"2024-04-23T10:12:02.858626Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Accuracy of Decision Tree Classifier after imputation: 0.5013484649075493\n","output_type":"stream"}]},{"cell_type":"code","source":"#Ada Boost\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.impute import SimpleImputer\n\n# Read the entire CSV file\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Sample 20,000 rows from the dataset\ndata_sample = data.sample(n=20000, random_state=42)\n\n# Separate features (X) and target variable (y)\nX = data_sample[['Confirmed', 'Recovered']]\ny = data_sample['Country/Region']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the AdaBoost classifier\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\n\n# Train the classifier on the imputed training data\nada_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the imputed test data\ny_pred = ada_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of AdaBoost Classifier after imputation:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-23T10:08:26.975390Z","iopub.execute_input":"2024-04-23T10:08:26.975795Z","iopub.status.idle":"2024-04-23T10:08:34.614065Z","shell.execute_reply.started":"2024-04-23T10:08:26.975767Z","shell.execute_reply":"2024-04-23T10:08:34.611756Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Accuracy of AdaBoost Classifier after imputation: 0.1705\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\n\n# Read the entire dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Sample 20,000 rows from the dataset\ndata_sample = data.sample(n=20000, random_state=42)\n\n# Separate features (X) and target variable (y)\nX = data_sample[['Confirmed', 'Recovered']]\ny = data_sample['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the XGBoost classifier\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Train the classifier on the imputed training data\nxgb_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the imputed test data\ny_pred = xgb_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of XGBoost Classifier after imputation:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T05:24:46.371776Z","iopub.execute_input":"2024-04-24T05:24:46.372526Z","iopub.status.idle":"2024-04-24T05:24:49.798635Z","shell.execute_reply.started":"2024-04-24T05:24:46.372481Z","shell.execute_reply":"2024-04-24T05:24:49.797273Z"},"trusted":true},"execution_count":2,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/input/covid19prediic/time-series-19-covid-combined.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Sample 20,000 rows from the dataset\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m data_sample \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msample\u001b[49m\u001b[43m(\u001b[49m\u001b[43mn\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m200000\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m,\u001b[49m\u001b[43mandom_state\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m42\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Separate features (X) and target variable (y)\u001b[39;00m\n\u001b[1;32m     15\u001b[0m X \u001b[38;5;241m=\u001b[39m data_sample[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mConfirmed\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRecovered\u001b[39m\u001b[38;5;124m'\u001b[39m]]\n","\u001b[0;31mTypeError\u001b[0m: NDFrame.sample() got an unexpected keyword argument 'andom_state'"],"ename":"TypeError","evalue":"NDFrame.sample() got an unexpected keyword argument 'andom_state'","output_type":"error"}]},{"cell_type":"code","source":"# ANN \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Read the entire dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Standardize features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train_imputed)\nX_test_scaled = scaler.transform(X_test_imputed)\n\n# Initialize the ANN model\nmodel = Sequential([\n    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n    Dense(64, activation='relu'),\n    Dense(len(label_encoder.classes_), activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train_scaled, y_train, epochs=10, batch_size=32, verbose=1)\n\n# Evaluate the model on test data\ntest_loss, test_accuracy = model.evaluate(X_test_scaled, y_test, verbose=1)\nprint(\"Test Accuracy:\", test_accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T12:07:00.944883Z","iopub.execute_input":"2024-04-21T12:07:00.945380Z","iopub.status.idle":"2024-04-21T12:09:43.740696Z","shell.execute_reply.started":"2024-04-21T12:07:00.945350Z","shell.execute_reply":"2024-04-21T12:09:43.739211Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stderr","text":"2024-04-21 12:07:03.392374: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-21 12:07:03.392571: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-21 12:07:03.566405: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:88: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2ms/step - accuracy: 0.1661 - loss: 4.3103\nEpoch 2/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.1908 - loss: 3.9323\nEpoch 3/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.1973 - loss: 3.8588\nEpoch 4/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.2034 - loss: 3.8050\nEpoch 5/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2ms/step - accuracy: 0.2092 - loss: 3.7726\nEpoch 6/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2ms/step - accuracy: 0.2129 - loss: 3.7383\nEpoch 7/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 2ms/step - accuracy: 0.2128 - loss: 3.7219\nEpoch 8/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 2ms/step - accuracy: 0.2156 - loss: 3.6979\nEpoch 9/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2ms/step - accuracy: 0.2165 - loss: 3.6780\nEpoch 10/10\n\u001b[1m5794/5794\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 2ms/step - accuracy: 0.2187 - loss: 3.6567\n\u001b[1m1449/1449\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.2205 - loss: 3.6568\nTest Accuracy: 0.22343523800373077\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nimport matplotlib.pyplot as plt\n\n# Read the entire dataset\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv')\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Standardize features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train_imputed)\nX_test_scaled = scaler.transform(X_test_imputed)\n\n# Train and evaluate XGBoost model\nxgb_classifier = XGBClassifier(random_state=42)\nxgb_classifier.fit(X_train_imputed, y_train)\nxgb_accuracy = accuracy_score(y_test, xgb_classifier.predict(X_test_imputed))\nprint(\"XGBoost Accuracy:\", xgb_accuracy)\n\n# Train and evaluate AdaBoost model\nadaboost_classifier = AdaBoostClassifier(random_state=42)\nadaboost_classifier.fit(X_train_imputed, y_train)\nadaboost_accuracy = accuracy_score(y_test, adaboost_classifier.predict(X_test_imputed))\nprint(\"AdaBoost Accuracy:\", adaboost_accuracy)\n\n# Train and evaluate ANN model\nmodel = Sequential([\n    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n    Dense(64, activation='relu'),\n    Dense(len(label_encoder.classes_), activation='softmax')\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(X_train_scaled, y_train, epochs=10, batch_size=32, verbose=0)\n_, ann_accuracy = model.evaluate(X_test_scaled, y_test, verbose=0)\nprint(\"ANN Accuracy:\", ann_accuracy)\n\n# Plotting the accuracies\nmodels = ['XGBoost', 'AdaBoost', 'ANN']\naccuracies = [xgb_accuracy, adaboost_accuracy, ann_accuracy]\n\nplt.bar(models, accuracies, color=['blue', 'orange', 'green'])\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Model Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit from 0 to 1\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T05:45:35.258766Z","iopub.execute_input":"2024-04-24T05:45:35.259150Z","iopub.status.idle":"2024-04-24T05:50:25.056597Z","shell.execute_reply.started":"2024-04-24T05:45:35.259122Z","shell.execute_reply":"2024-04-24T05:50:25.055586Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"XGBoost Accuracy: 0.16861205203995772\nAdaBoost Accuracy: 0.1762929081533582\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:88: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"ANN Accuracy: 0.22233489155769348\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# Read a sample of the dataset\nsample_size = 200000  # Adjust the sample size as needed\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv', nrows=sample_size)\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the classifiers\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Fit the AdaBoostClassifier\nada_classifier.fit(X_train_imputed, y_train)\n\n# Initialize the ANN model\nann_model = Sequential([\n    Dense(64, activation='relu', input_shape=(X_train_imputed.shape[1],)),\n    Dropout(0.2),\n    Dense(32, activation='relu'),\n    Dropout(0.2),\n    Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nann_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Define early stopping to prevent overfitting\nearly_stopping = EarlyStopping(monitor='val_loss', patience=5)\n\n# Train the ANN model\nhistory = ann_model.fit(X_train_imputed, y_train, epochs=50, validation_split=0.2, callbacks=[early_stopping])\n\n# Predict the target variable on the test data\ny_pred_ada = ada_classifier.predict(X_test_imputed)\ny_pred_xgb = xgb_classifier.predict(X_test_imputed)\ny_pred_ann = (ann_model.predict(X_test_imputed) > 0.5).astype(\"int32\")\n\n# Calculate the accuracy of each model\naccuracy_ada = accuracy_score(y_test, y_pred_ada)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\naccuracy_ann = accuracy_score(y_test, y_pred_ann)\n\n# Store accuracies in a dictionary\naccuracies = {'AdaBoost': accuracy_ada, 'XGBoost': accuracy_xgb, 'ANN': accuracy_ann}\n\n# Plot the accuracies using a bar graph\nplt.figure(figsize=(10, 6))\nplt.bar(accuracies.keys(), accuracies.values(), color=['green', 'red', 'orange'])\nplt.xlabel('Classifier')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Classifier Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy values\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T05:44:59.362206Z","iopub.execute_input":"2024-04-24T05:44:59.363062Z","iopub.status.idle":"2024-04-24T05:45:27.886049Z","shell.execute_reply.started":"2024-04-24T05:44:59.363029Z","shell.execute_reply":"2024-04-24T05:45:27.884386Z"},"trusted":true},"execution_count":4,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[4], line 39\u001b[0m\n\u001b[1;32m     36\u001b[0m xgb_classifier \u001b[38;5;241m=\u001b[39m XGBClassifier(random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[1;32m     38\u001b[0m \u001b[38;5;66;03m# Fit the AdaBoostClassifier\u001b[39;00m\n\u001b[0;32m---> 39\u001b[0m \u001b[43mada_classifier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_imputed\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     41\u001b[0m \u001b[38;5;66;03m# Initialize the ANN model\u001b[39;00m\n\u001b[1;32m     42\u001b[0m ann_model \u001b[38;5;241m=\u001b[39m Sequential([\n\u001b[1;32m     43\u001b[0m     Dense(\u001b[38;5;241m64\u001b[39m, activation\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrelu\u001b[39m\u001b[38;5;124m'\u001b[39m, input_shape\u001b[38;5;241m=\u001b[39m(X_train_imputed\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m],)),\n\u001b[1;32m     44\u001b[0m     Dropout(\u001b[38;5;241m0.2\u001b[39m),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     47\u001b[0m     Dense(\u001b[38;5;241m1\u001b[39m, activation\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msigmoid\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     48\u001b[0m ])\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:162\u001b[0m, in \u001b[0;36mBaseWeightBoosting.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    159\u001b[0m sample_weight[zero_weight_mask] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.0\u001b[39m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;66;03m# Boosting step\u001b[39;00m\n\u001b[0;32m--> 162\u001b[0m sample_weight, estimator_weight, estimator_error \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_boost\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    163\u001b[0m \u001b[43m    \u001b[49m\u001b[43miboost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrandom_state\u001b[49m\n\u001b[1;32m    164\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    166\u001b[0m \u001b[38;5;66;03m# Early termination\u001b[39;00m\n\u001b[1;32m    167\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:569\u001b[0m, in \u001b[0;36mAdaBoostClassifier._boost\u001b[0;34m(self, iboost, X, y, sample_weight, random_state)\u001b[0m\n\u001b[1;32m    530\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Implement a single boost.\u001b[39;00m\n\u001b[1;32m    531\u001b[0m \n\u001b[1;32m    532\u001b[0m \u001b[38;5;124;03mPerform a single boost according to the real multi-class SAMME.R\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    566\u001b[0m \u001b[38;5;124;03m    If None then boosting has terminated early.\u001b[39;00m\n\u001b[1;32m    567\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    568\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39malgorithm \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSAMME.R\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m--> 569\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_boost_real\u001b[49m\u001b[43m(\u001b[49m\u001b[43miboost\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrandom_state\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    571\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:  \u001b[38;5;66;03m# elif self.algorithm == \"SAMME\":\u001b[39;00m\n\u001b[1;32m    572\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_boost_discrete(iboost, X, y, sample_weight, random_state)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:621\u001b[0m, in \u001b[0;36mAdaBoostClassifier._boost_real\u001b[0;34m(self, iboost, X, y, sample_weight, random_state)\u001b[0m\n\u001b[1;32m    614\u001b[0m np\u001b[38;5;241m.\u001b[39mclip(proba, np\u001b[38;5;241m.\u001b[39mfinfo(proba\u001b[38;5;241m.\u001b[39mdtype)\u001b[38;5;241m.\u001b[39meps, \u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39mproba)\n\u001b[1;32m    616\u001b[0m \u001b[38;5;66;03m# Boost weight using multi-class AdaBoost SAMME.R alg\u001b[39;00m\n\u001b[1;32m    617\u001b[0m estimator_weight \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    618\u001b[0m     \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1.0\u001b[39m\n\u001b[1;32m    619\u001b[0m     \u001b[38;5;241m*\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlearning_rate\n\u001b[1;32m    620\u001b[0m     \u001b[38;5;241m*\u001b[39m ((n_classes \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1.0\u001b[39m) \u001b[38;5;241m/\u001b[39m n_classes)\n\u001b[0;32m--> 621\u001b[0m     \u001b[38;5;241m*\u001b[39m \u001b[43mxlogy\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_coding\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_predict_proba\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msum\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    622\u001b[0m )\n\u001b[1;32m    624\u001b[0m \u001b[38;5;66;03m# Only boost the weights if it will fit again\u001b[39;00m\n\u001b[1;32m    625\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m iboost \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_estimators \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    626\u001b[0m     \u001b[38;5;66;03m# Only boost positive weights\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/numpy/core/_methods.py:49\u001b[0m, in \u001b[0;36m_sum\u001b[0;34m(a, axis, dtype, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_sum\u001b[39m(a, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m     48\u001b[0m          initial\u001b[38;5;241m=\u001b[39m_NoValue, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[0;32m---> 49\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mumr_sum\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeepdims\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minitial\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwhere\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\n\n# Read a sample of the dataset\nsample_size = 1500  # Adjust the sample size as needed\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv', nrows=sample_size)\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the classifiers\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Train the classifiers\nrf_classifier.fit(X_train_imputed, y_train)\nada_classifier.fit(X_train_imputed, y_train)\nxgb_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the test data\ny_pred_rf = rf_classifier.predict(X_test_imputed)\ny_pred_ada = ada_classifier.predict(X_test_imputed)\ny_pred_xgb = xgb_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of each model\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\naccuracy_ada = accuracy_score(y_test, y_pred_ada)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\n\n# Print the accuracies\nprint(\"Accuracy of Random Forest Classifier:\", accuracy_rf)\nprint(\"Accuracy of AdaBoost Classifier:\", accuracy_ada)\nprint(\"Accuracy of XGBoost Classifier:\", accuracy_xgb)\n\n# Store accuracies in a dictionary\naccuracies = {'Random Forest': accuracy_rf, 'AdaBoost': accuracy_ada, 'XGBoost': accuracy_xgb}\n\n# Plot the accuracies using a bar graph\nplt.figure(figsize=(1, 6))\nplt.bar(accuracies.keys(), accuracies.values(), color=['blue', 'green', 'red'])\nplt.xlabel('Classifier')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Classifier Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy values\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-24T05:50:26.986052Z","iopub.execute_input":"2024-04-24T05:50:26.986831Z","iopub.status.idle":"2024-04-24T05:50:27.612145Z","shell.execute_reply.started":"2024-04-24T05:50:26.986803Z","shell.execute_reply":"2024-04-24T05:50:27.611159Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Accuracy of Random Forest Classifier: 0.8866666666666667\nAccuracy of AdaBoost Classifier: 0.7733333333333333\nAccuracy of XGBoost Classifier: 0.9366666666666666\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 100x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\n\n# Read a sample of the dataset\nsample_size = 200000  # Adjust the sample size as needed\ndata = pd.read_csv('/kaggle/input/covid19prediic/time-series-19-covid-combined.csv', nrows=sample_size)\n\n# Separate features (X) and target variable (y)\nX = data[['Confirmed', 'Recovered']]\ny = data['Country/Region']\n\n# Encode the target variable using Label Encoding\nlabel_encoder = LabelEncoder()\ny_encoded = label_encoder.fit_transform(y)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n\n# Handle missing values by imputing them with the mean\nimputer = SimpleImputer(strategy='mean')\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Initialize the classifiers\nrf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\nada_classifier = AdaBoostClassifier(n_estimators=50, random_state=42)\nxgb_classifier = XGBClassifier(random_state=42)\n\n# Train the classifiers\nrf_classifier.fit(X_train_imputed, y_train)\nada_classifier.fit(X_train_imputed, y_train)\nxgb_classifier.fit(X_train_imputed, y_train)\n\n# Predict the target variable on the test data\ny_pred_rf = rf_classifier.predict(X_test_imputed)\ny_pred_ada = ada_classifier.predict(X_test_imputed)\ny_pred_xgb = xgb_classifier.predict(X_test_imputed)\n\n# Calculate the accuracy of each model\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\naccuracy_ada = accuracy_score(y_test, y_pred_ada)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\n\n# Store accuracies in a dictionary\naccuracies = {'Random Forest': accuracy_rf, 'AdaBoost': accuracy_ada, 'XGBoost': accuracy_xgb}\n\n# Plot the accuracies using a bar graph\nplt.figure(figsize=(10, 6))\nplt.bar(accuracies.keys(), accuracies.values(), color=['blue', 'green', 'red'])\nplt.xlabel('Classifier')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Classifier Accuracies')\nplt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy values\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-23T11:11:39.465269Z","iopub.execute_input":"2024-04-23T11:11:39.465773Z","iopub.status.idle":"2024-04-23T11:16:15.153526Z","shell.execute_reply.started":"2024-04-23T11:11:39.465738Z","shell.execute_reply":"2024-04-23T11:16:15.151994Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}